#!/local/user2bmb/Software/anaconda/bin/python
# -*- coding: utf-8 -*-
import os
import sys
import argparse
import logging
import time
import re
import smtplib
from email.message import EmailMessage
from datetime import datetime

from dmagic import scheduling

from globus import config
from globus import voyager_setup
from globus import log
from globus import pv
from globus import directories

__author__ = "Francesco De Carlo"
__copyright__ = "Copyright (c) 2019, UChicago Argonne, LLC."
__version__ = "0.0.1"
__docformat__ = 'restructuredtext en'


def init(args):
    if not os.path.exists(str(args.config)):
        config.write(str(args.config))
    else:
        raise RuntimeError("{0} already exists".format(args.config))


def show(args):
    # see https://globus-sdk-python.readthedocs.io/en/stable/tutorial/#step-1-get-a-client
    # to create your project app_id. Once is set put it in globus.config app-id field
    app_id = args.app_id
    ac, tc = globus.create_clients(app_id)
    globus.show_endpoints(args, ac, tc)


def email(args):
    '''Sends an email to all users on the current proposal
    with information on how to get their data from Voyager.
    '''
    year_month, pi_lastname, prop_number, prop_title = pv.update_experiment_info(args)
    email_list = voyager_setup.make_user_email_list(args)
    
    with open(args.globus_message_file, 'r') as mess_file:
        msg = EmailMessage()
        msg.set_content(mess_file.read())

    log.info('Message to users start:')  
    log.info('*** %s' % args.globus_message)  
    log.info('Message to users end')  

    msg['From'] = args.support-primary-email
    msg['Subject'] = 'Important information on APS experiment'
    s = smtplib.SMTP('localhost')
    for em in email_list:
        msg['To'] = em
        log.info('Sending informational message to {:s}'.format(em))
        s.send_message(msg)
    s.quit()


def dirs(args):
    # create directory on detector computer
    log.info('Making directory on the detector computer {:s}'.format(args.detector))
    detector_dir_name = directories.create_detector_dir_name(args)
    remote_server = args.detector_user_name + '@' + args.detector
    directories.mkdir(remote_server, detector_dir_name)

    # create directory on data analysis computer
    log.info('Making directory on the analysis computer {:s}'.format(args.analysis))
    analysis_dir_name = directories.create_analysis_dir_name(args)
    remote_server = args.analysis_user_name + '@' + args.analysis
    directories.mkdir(remote_server, analysis_dir_name)
 

def user_init(args):
    '''Initiate actions for the start of an experiment.
    * Create an experiment in the DM system.
    * Add users to this experiment
    '''
    new_exp = voyager_setup.create_dm_experiment(args)
    user_list = voyager_setup.make_username_list(args)
    voyager_setup.experiment_add_users(new_exp, user_list)


def start_daq(args):
    '''Start a Data Management DAQ on the analysis machine directory.
    '''
    voyager_setup.start_dm_daq(args)

    
def stop_daq(args):
    '''Stop the Data Management DAQ set up for this experiment.
    '''
    voyager_setup.start_dm_daq(args)


def main():
    home = os.path.expanduser("~")
    logs_home = home + '/logs/'

    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)

    lfname = logs_home + 'globus_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H:%M:%S") + '.log'
    log.setup_custom_logger(lfname)


    parser = argparse.ArgumentParser()
    parser.add_argument('--config', **config.SECTIONS['general']['config'])
    show_params = config.GLOBUS_PARAMS
    email_params = config.EMAIL_PARAMS
    dirs_params = config.GLOBUS_PARAMS

    cmd_parsers = [
        ('init',        init,           (),                             "Create configuration file"),
        ('show',        show,           show_params,                    "Show endpoints"),
        ('email',       email,          email_params,                   "Create folder on endpoint and send email with link to user"),
        ('dirs',        dirs,           dirs_params,                    "Create folders on data collection and data analysis computers"),
        ('user_init',   user_init,      email_params,                   "Initialize experiment"),
        ('start_daq',   start_daq,      dirs_params,                   "Initialize DM DAQ"),
        ('stop_daq',    stop_daq,       dirs_params,                   "Stop DM DAQ"),
    ]

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    for cmd, func, sections, text in cmd_parsers:
        cmd_params = config.Params(sections=sections)
        cmd_parser = subparsers.add_parser(cmd, help=text, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        cmd_parser = cmd_params.add_arguments(cmd_parser)
        cmd_parser.set_defaults(_func=func)

    args = config.parse_known_args(parser, subparser=True)
  
    try:
        # load args from default (config.py) if not changed
        config.log_values(args)
        args._func(args)
        # undate globus.config file
        sections = config.GLOBUS_PARAMS
        config.write(args.config, args=args, sections=sections)
    except RuntimeError as e:
        log.error(str(e))
        sys.exit(1)


if __name__ == '__main__':
    main()

