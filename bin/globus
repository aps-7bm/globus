#!/local/user2bmb/Software/anaconda/bin/python
# -*- coding: utf-8 -*-
import os
import re
import sys
import argparse
import pathlib
import logging
import time
from datetime import datetime
from dmagic import scheduling

from globus import config
from globus import voyager_setup
from globus import log
from globus import pv
from globus import directories
from globus import message

__author__ = "Francesco De Carlo"
__copyright__ = "Copyright (c) 2019, UChicago Argonne, LLC."
__version__ = "0.0.1"
__docformat__ = 'restructuredtext en'


def init(args):
    if not os.path.exists(str(args.config)):
        config.write(str(args.config))
    else:
        raise RuntimeError("{0} already exists".format(args.config))

def show(args):
    # show args from default (config.py) if not changed
    config.show_config(args)

def email(args):

    '''Sends an email to all users on the current experiment 
    with information on how to get their data from Voyager.
    '''
    log.info('Sending e-mail to users on the DM experiment')
    username_list = voyager_setup.make_username_list(args)
    email_list = voyager_setup.make_user_email_list(username_list)
    if len(email_list) == 0:
        log.warning('   No valid e-mail addresses')
        return

    msg = message.message(args)
    log.info('   Message to users start:')  
    log.info('   *** %s' % msg)  
    log.info('   Message to users end')  

    message.send_email(msg, email_list)


def dirs(args):
    # create directory on detector computer
    log.info('Making directory on the detector computer {:s}'.format(args.detector))
    detector_dir_name = directories.create_detector_dir_name(args)
    remote_server = args.detector_user_name + '@' + args.detector
    directories.mkdir(remote_server, detector_dir_name)

    # create directory on data analysis computer
    log.info('Making directory on the analysis computer {:s}'.format(args.analysis))
    analysis_dir_name = directories.create_analysis_dir_name(args)
    remote_server = args.analysis_user_name + '@' + args.analysis
    directories.mkdir(remote_server, analysis_dir_name)
 

def dm_init(args):
    '''Initiate actions for the start of an experiment.
    * Create an experiment in the DM system.
    * Add users to this experiment
    '''
    new_exp = voyager_setup.create_dm_experiment(args)
    user_list = voyager_setup.make_dm_username_list(args)
    log.info('Adding users from the current proposal to the DM experiment.')
    voyager_setup.add_users_dm_experiment(new_exp, user_list)


def start_daq(args):
    '''Start a Data Management DAQ on the analysis machine directory.
    '''
    voyager_setup.start_dm_daq(args)

    
def stop_daq(args):
    '''Stop the Data Management DAQ set up for this experiment.
    '''
    voyager_setup.stop_dm_daq(args)


def add_user(args):
    voyager_setup.add_user_dm_experiment(args)


def remove_user(args):
    voyager_setup.remove_user_dm_experiment(args)


def list_users(args):
    voyager_setup.list_users_dm_experiment(args)


def main():
    home = os.path.expanduser("~")
    logs_home = home + '/logs/'

    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)

    lfname = logs_home + 'globus_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H:%M:%S") + '.log'
    log.setup_custom_logger(lfname)


    parser = argparse.ArgumentParser()
    parser.add_argument('--config', **config.SECTIONS['general']['config'])
    globus_params = config.GLOBUS_PARAMS

    cmd_parsers = [
        ('init',        init,           (),             "Create configuration file"),
        ('show',        show,           globus_params,  "Show status"),
        ('dm_init',     dm_init,        globus_params,  "Initialize DM experiment"),
        ('dirs',        dirs,           globus_params,  "Create folders on data collection and data analysis computers"),
        ('list_users',  list_users,     globus_params,  "List the users on the current DM experiment"),
        ('add_user',    add_user,       globus_params,  "Add a user to the current DM experiment by badge number"),
        ('remove_user', remove_user,    globus_params,  "Remove a user from the current DM experiment by badge number"),
        ('email',       email,          globus_params,  "Send email with link to all users on the proposal"),
        ('start_daq',   start_daq,      globus_params,  "Start DM DAQ"),
        ('stop_daq',    stop_daq,       globus_params,  "Stop DM DAQ"),
    ]

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    for cmd, func, sections, text in cmd_parsers:
        cmd_params = config.Params(sections=sections)
        cmd_parser = subparsers.add_parser(cmd, help=text, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        cmd_parser = cmd_params.add_arguments(cmd_parser)
        cmd_parser.set_defaults(_func=func)

    args = config.parse_known_args(parser, subparser=True)
  
    try:
        args._func(args)
    except RuntimeError as e:
        log.error(str(e))
        sys.exit(1)


if __name__ == '__main__':
    main()

